{"version":3,"sources":["chrisblatchley/roast_buddy/roasts.cljs"],"mappings":";;AAEA,AAAA,AAAMA,AACHC;AADH,AAAA,AAAA,AAAA,AAAA,AAAA,AAESA,AAEM,AAAAC;;AAEf,AAAA,AAAMC,AACHC,AAAMC;AADT,AAEE,AAAAC,AAA0B,AAAA,AAAA,AAAIF,AAAYS;AAA1CP,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAcK;AAAd,AAAAD,AAAAJ,AAAA,AAAmBM;AACbE,AAAI,AAAMZ;AACVa,AAAO,AAAA,AAAG,AAAGD,AAAIH;AACjBK,AAAO,AAAGX,AAAaO;AACvBK,AAAI,AAAGD,AAAOD;AACdG,AAAgB,AAAA,AAAK,AAAA,AAAG,AAAGJ,AAAI,AAAA,AAAaV;AALlD,AAME,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACe,AAAUf,AAAcgB,AAAYF,AAAsBb,AAAkBY;;AAEjF,AAAA,AAAMI,AACHjB;AADH,AAEE,AAAK,AAAK,AAAA,AAAM,AAAA,AAAaA,AACxB,AAAA,AAAM,AAAA,AAAcA;;AAE3B,AAAA,AAAMkB,AACHlB;AADH,AAEE,AACE,AAAK,AAAA,AAAM,AAAA,AAAcA;AAD3B;;AAAA,AAEE,AAAK,AAAA,AAAM,AAAA,AAAaA;AAF1B;;AAAA,AAAA;;;;;AAKF,AAAA,AAAMmB,AACHnB;AADH,AAEE,AAAA,AAACoB,AAAMpB,AAAmB,AAAAF","names":["chrisblatchley.roast-buddy.roasts/create-roast","name","js/Date","chrisblatchley.roast-buddy.roasts/record-temp","roast","current-temp","map__43740","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","time","temp","cljs.core/last","now","d-time","d-temp","ror","seconds-elapsed","cljs.core.update_in","cljs.core/conj","chrisblatchley.roast-buddy.roasts/roasting?","chrisblatchley.roast-buddy.roasts/status","chrisblatchley.roast-buddy.roasts/finish-roast","cljs.core.assoc"],"sourcesContent":["(ns chrisblatchley.roast-buddy.roasts)\n\n(defn create-roast\n  [name]\n  {:name name\n   :data []\n   :started-at (js/Date.)})\n\n(defn record-temp\n  [roast current-temp]\n  (let [{:keys [time temp]} (-> roast :data last)\n        now (.now js/Date)\n        d-time (/ (- now time) 1000)\n        d-temp (- current-temp temp)\n        ror (/ d-temp d-time)\n        seconds-elapsed (int (/ (- now (:started-at roast)) 1000))]\n    (update-in roast [:data] conj {:time seconds-elapsed :temp current-temp :ror ror})))\n\n(defn roasting?\n  [roast]\n  (and (not (nil? (:started-at roast)))\n       (nil? (:finished-at roast))))\n\n(defn status\n  [roast]\n  (cond\n    (not (nil? (:finished-at roast))) :finished\n    (not (nil? (:started-at roast))) :started\n    :else :ready))\n\n(defn finish-roast\n  [roast]\n  (assoc roast :finished-at (js/Date.)))"]}